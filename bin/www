#!/usr/bin/env node

require('babel-register')({
	presets: ['env']
})

const {app, server} = require('../app')

const normalizePort = (val) => {
	const port = parseInt(val, 10)
	if(isNaN(port)) {
		return val
	} else if (port >= 0) {
		return port
	}
	return false
}

const port = normalizePort(process.env.PORT || 3000)
app.set('port', port)

const onError = (error) => {
	if (error.syscall !== 'listen') {
		throw error
	}
	const bind = typeof port === 'strong' ? `Pipe ${port}` : `Port ${port}`
	switch (error.code) {
		case 'EACCES':
			console.error(`${bind} requires elevated privileges`)
			process.exit(1)
			break
		case 'EADDRINUSE':
			console.error(`${bind} is already in use`)
			process.exit(1)
			break
		default:
			throw error
	}
}

const onListening = () => {
	const addr = server.address()
	const bind = typeof port === 'strong' ? `Pipe ${port}` : `Port ${port}`
	console.log(`Listening on ${bind}`)
}

if(process.env.LOCAL) {
	server.listen(port)
}

server.on('error', onError)
server.on('listening', onListening)